import asyncio
import os
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from database import init_db, add_router_db, remove_router_db, list_routers_db, add_new_user_db, validate_router, check_user_exist_db, list_user_info_db

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_menu():
    menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä", callback_data="add_router"),
        InlineKeyboardButton(text="üìÑ –ú–æ—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="print_user_information")],
        [InlineKeyboardButton(text="üì∂ –ú–æ–∏ —Ä–æ—É—Ç–µ—Ä—ã", callback_data="list_routers"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status_button")],
    ])
    return menu

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
def get_consent_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –î–∞—é –∑–≥–æ–¥—É", callback_data="give_consent")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    adding_phone = State()
    adding_name = State()
    adding_consent = State()
    adding_mac = State()
    adding_router_name = State()
    removing = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ MAC-–∞–¥—Ä–µ—Å–∞
def is_valid_mac(mac: str) -> bool:
    pattern = r'^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$'
    return bool(re.match(pattern, mac))

# /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    if check_user_exist_db(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu())
    else:
        await state.set_state(Form.adding_phone)
        await message.answer("üì≤ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", reply_markup=get_phone_keyboard())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Ç–µ–ª–µ—Ñ–æ–Ω
@dp.message(Form.adding_phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await state.set_state(Form.adding_name)
    await message.answer("–í–≤–µ–¥–∏ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∏–º—è
@dp.message(Form.adding_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.adding_consent)
    await message.answer("–ó–ì–û–î–ê —Å—É–±'—î–∫—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–∞ –∑–±—ñ—Ä —Ç–∞ –æ–±—Ä–æ–±–∫—É –π–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
                        reply_markup=get_consent_keyboard())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Ñ–∏–Ω–∏—à—å
@dp.callback_query(F.data == "give_consent", Form.adding_consent)
async def process_consent(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    success, msg = add_new_user_db(callback.from_user.id, data["phone"], data["name"])
    if success:
        await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu())
        await state.clear()
    else:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {msg}")
    await callback.answer()

# –í—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=get_menu())
    await callback.answer()

# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
@dp.callback_query(F.data == "status_button")
async def main_menu(callback: types.CallbackQuery):
    await callback.message.answer("üì° –°—Ç–∞—Ç—É—Å: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ! üü¢üõ° \n–¢—Ä–∞—Ñ—Ñ–∏–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω! üü¢üîí", reply_markup=get_menu())
    #await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_menu())
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: —Å—Ç–∞—Ä—Ç
@dp.callback_query(F.data == "add_router")
async def add_router_mac(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.adding_mac)
    await callback.message.answer("–í–≤–µ–¥–∏ MAC –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç XX:XX:XX:XX:XX:XX):")
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: MAC
@dp.message(Form.adding_mac)
async def add_router_validate_mac(message: Message, state: FSMContext):
    mac = message.text.strip()
    if not is_valid_mac(mac):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAC-–∞–¥—Ä–µ—Å–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç XX:XX:XX:XX:XX:XX")
        return
    valid, msg = validate_router(mac)
    if not valid:
        await message.answer(msg)
        return
    await state.update_data(mac=mac)
    await state.set_state(Form.adding_router_name)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞:")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: –§–∏–Ω–∞–ª –∏ –∏–º—è —Ä–æ—É—Ç–µ—Ä–∞
@dp.message(Form.adding_router_name)
async def add_router_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    success, msg = add_router_db(
        message.from_user.id,
        data["mac"],
        message.text
    )
    await message.answer(msg, reply_markup=get_menu())
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: —Å—Ç–∞—Ä—Ç
@dp.callback_query(F.data == "remove_router")
async def remove_router_prompt(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.removing)
    await callback.message.answer("–í–≤–µ–¥–∏ MAC –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: MAC
@dp.message(Form.removing)
async def remove_router(message: Message, state: FSMContext):
    success, msg = remove_router_db(message.from_user.id, message.text)
    await message.answer(msg, reply_markup=get_menu())
    await state.clear()

# –°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
@dp.callback_query(F.data == "list_routers")
async def list_routers(callback: types.CallbackQuery):
    routers = list_routers_db(callback.from_user.id)
    if routers:
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ (–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ)
        keyboard_buttons = [
            [InlineKeyboardButton(text=f"{router['name']} ({router['mac']})", callback_data=f"router_{router['mac']}")]
            for router in routers
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.answer("–í–∞—à–∏ —Ä–æ—É—Ç–µ—Ä—ã:", reply_markup=keyboard)
    else:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç!", reply_markup=get_menu())
    await callback.answer()

@dp.callback_query(F.data == "print_user_information")
async def print_user_information(callback: types.CallbackQuery):
    success, data = list_user_info_db(callback.from_user.id)

    if not success:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {data}", reply_markup=get_menu())
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    info_text = f"üì± {data['phone_number']}\nüë§ {data['name']}\n"

    if data["routers"]:
        for router_name, mac in [(r[1], r[0]) for r in data["routers"]]:
            info_text += f"üì∂ {router_name} üñß {mac}\n"
    else:
        info_text += "‚ö†Ô∏è –†–æ—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    await callback.message.answer(info_text.strip(), reply_markup=get_menu())
    await callback.answer()

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–º
@dp.callback_query(F.data.startswith("router_"))
async def handle_router_selection(callback: types.CallbackQuery):
    mac = callback.data.replace("router_", "")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä", callback_data=f"delete_{mac}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_routers")]
        ]
    )

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ—É—Ç–µ—Ä:\nMAC: {mac}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
@dp.callback_query(F.data.startswith("delete_"))
async def delete_router(callback: types.CallbackQuery):
    mac = callback.data.replace("delete_", "")

    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success, message = remove_router_db(callback.from_user.id, mac)
    await callback.message.answer(
        message,
        reply_markup=get_menu()
    )
    await callback.answer()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())